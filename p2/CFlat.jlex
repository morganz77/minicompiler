import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

//maps names to sym constants
class Map {
    static java.util.HashMap<String, Integer> m_reserved = 
                                     new java.util.HashMap<String, Integer>();
    static java.util.HashMap<String, Integer> m_charsym = 
                                    new java.util.HashMap<String, Integer>();
    static{
        m_charsym.put("{", sym.LCURLY);
        m_charsym.put("}", sym.RCURLY);
        m_charsym.put("(", sym.LPAREN);
        m_charsym.put(")", sym.RPAREN);
        m_charsym.put(";", sym.SEMICOLON);
        m_charsym.put(",", sym.COMMA);
        m_charsym.put(".", sym.DOT);
        m_charsym.put("<<", sym.WRITE);
        m_charsym.put(">>", sym.READ);
        m_charsym.put("++", sym.PLUSPLUS);
        m_charsym.put("--", sym.MINUSMINUS);
        m_charsym.put("+", sym.PLUS);
        m_charsym.put("-", sym.MINUS);
        m_charsym.put("*", sym.TIMES);
        m_charsym.put("/", sym.DIVIDE);
        m_charsym.put("!", sym.NOT);
        m_charsym.put("&&", sym.AND);
        m_charsym.put("||", sym.OR);
        m_charsym.put("==", sym.EQUALS);
        m_charsym.put("!=", sym.NOTEQUALS);
        m_charsym.put("<", sym.LESS);
        m_charsym.put(">", sym.GREATER);
        m_charsym.put("<=", sym.LESSEQ);
        m_charsym.put(">=", sym.GREATEREQ);
        m_charsym.put("=", sym.ASSIGN);

        m_reserved.put("bool", sym.BOOL);
        m_reserved.put("int", sym.INT);
        m_reserved.put("void", sym.VOID);
        m_reserved.put("true", sym.TRUE);
        m_reserved.put("false", sym.FALSE);
        m_reserved.put("struct", sym.STRUCT);
        m_reserved.put("cin", sym.CIN);
        m_reserved.put("cout", sym.COUT);
        m_reserved.put("if", sym.IF);
        m_reserved.put("else", sym.ELSE);
        m_reserved.put("while", sym.WHILE);
        m_reserved.put("return", sym.RETURN);
    }
}

%%

DIGIT =      [0-9]
WHITESPACE = [\040\t]
RESERVED =   bool|int|void|true|false|struct|cin|cout|if|else|while|return
ID =         [a-zA-Z_][a-zA-Z0-9_]* 			\\ can a single _ be a variable name?
STRING =     \"(\\[nt\'\"\\\?]|[^\\\n\"])*\"

UNTERM_BAD_STRING =     \"(\\[^nt\'\"\\\?]|[^\\\n\"])*
UNTERM_STRING =     \"(\\[nt\'\"\\\?]|[^\\\n\"])*
BAD_STRING =     \"(\\[^nt\'\"\\\?]|[^\\\n\"])*\"

CHARSYM = \{|\}|\(|\)|;|,|\.|<<|>>|\+\+|--|\+|-|\*|/|!|&&|\|\||==|!=|<|>|<=|>=|=
COMMENT = (\/\/|#).*

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            try{
                int val = (new Integer(yytext())).intValue();
                Symbol S = new Symbol(sym.INTLITERAL,
                                 new IntLitTokenVal(yyline+1, CharNum.num, val));
                CharNum.num += yytext().length();
                return S;
            } catch (NumberFormatException nfe){
                ErrMsg.warn(yyline+1, CharNum.num,
                                     "integer literal too large");

                Symbol S = new Symbol(sym.INTLITERAL,
                    new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
                CharNum.num += yytext().length();
                return S;
            }
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

{CHARSYM} { Symbol S = new Symbol(Map.m_charsym.get(yytext()), 
                new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

{RESERVED} { Symbol S = new Symbol(Map.m_reserved.get(yytext()), 
                new TokenVal(yyline+1, CharNum.num)); 
            CharNum.num += yytext().length();
            return S;
          }


{ID}      { Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, 
                CharNum.num, yytext())); 
            CharNum.num += yytext().length();
            return S;
          }

{STRING} { Symbol S = new Symbol(sym.STRINGLITERAL, 
                new StrLitTokenVal(yyline+1, CharNum.num, yytext())); 
            CharNum.num += yytext().length();
            return S;
          }

{BAD_STRING} {  ErrMsg.fatal(yyline+1, CharNum.num, 
                        "string literal with bad escaped character ignored");
                CharNum.num += yytext().length();
             }

{UNTERM_STRING} {  ErrMsg.fatal(yyline+1, CharNum.num, 
                        "unterminated string literal ignored");
                CharNum.num += yytext().length();
             }

{UNTERM_BAD_STRING} {  ErrMsg.fatal(yyline+1, CharNum.num, 
                        "unterminated string literal with bad escaped character ignored");
                CharNum.num += yytext().length();
             }

{COMMENT} { 
          }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }

